/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/programming-kubernetes/cnat/cnat-client-go/pkg/apis/cnat/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AtLister helps list Ats.
type AtLister interface {
	// List lists all Ats in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.At, err error)
	// Ats returns an object that can list and get Ats.
	Ats(namespace string) AtNamespaceLister
	AtListerExpansion
}

// atLister implements the AtLister interface.
type atLister struct {
	indexer cache.Indexer
}

// NewAtLister returns a new AtLister.
func NewAtLister(indexer cache.Indexer) AtLister {
	return &atLister{indexer: indexer}
}

// List lists all Ats in the indexer.
func (s *atLister) List(selector labels.Selector) (ret []*v1alpha1.At, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.At))
	})
	return ret, err
}

// Ats returns an object that can list and get Ats.
func (s *atLister) Ats(namespace string) AtNamespaceLister {
	return atNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AtNamespaceLister helps list and get Ats.
type AtNamespaceLister interface {
	// List lists all Ats in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.At, err error)
	// Get retrieves the At from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.At, error)
	AtNamespaceListerExpansion
}

// atNamespaceLister implements the AtNamespaceLister
// interface.
type atNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ats in the indexer for a given namespace.
func (s atNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.At, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.At))
	})
	return ret, err
}

// Get retrieves the At from the indexer for a given namespace and name.
func (s atNamespaceLister) Get(name string) (*v1alpha1.At, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("at"), name)
	}
	return obj.(*v1alpha1.At), nil
}
