// Package xo contains the types for schema 'test-xo-db'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// City represents a row from 'test-xo-db.City'.
type City struct {
	ID          int    `json:"ID"`          // ID
	Name        string `json:"Name"`        // Name
	Countrycode string `json:"CountryCode"` // CountryCode
	District    string `json:"District"`    // District
	Population  int    `json:"Population"`  // Population

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the City exists in the database.
func (c *City) Exists() bool {
	return c._exists
}

// Deleted provides information if the City has been deleted from the database.
func (c *City) Deleted() bool {
	return c._deleted
}

// Insert inserts the City to the database.
func (c *City) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO test-xo-db.City (` +
		`ID, Name, CountryCode, District, Population` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population)
	_, err = db.Exec(sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the City in the database.
func (c *City) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test-xo-db.City SET ` +
		`Name = ?, CountryCode = ?, District = ?, Population = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, c.Name, c.Countrycode, c.District, c.Population, c.ID)
	_, err = db.Exec(sqlstr, c.Name, c.Countrycode, c.District, c.Population, c.ID)
	return err
}

// Save saves the City to the database.
func (c *City) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the City from the database.
func (c *City) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test-xo-db.City WHERE ID = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CityByID retrieves a row from 'test-xo-db.City' as a City.
//
// Generated from index 'City_ID_pkey'.
func CityByID(db XODB, id int) (*City, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, Name, CountryCode, District, Population ` +
		`FROM test-xo-db.City ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	c := City{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Name, &c.Countrycode, &c.District, &c.Population)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
